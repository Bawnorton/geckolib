plugins {
    id 'fabric-loom' version '1.2-SNAPSHOT'
    id 'java'
    id 'maven-publish'
    id 'com.matthewprenger.cursegradle' version '1.4.0'
    id "com.modrinth.minotaur" version "2.+"
}

import groovy.json.JsonOutput
import groovy.json.JsonSlurper

sourceCompatibility = JavaVersion.VERSION_17
targetCompatibility = JavaVersion.VERSION_17

base {
    archivesName = "geckolib-fabric-${minecraft_version}"
}

version = project.mod_version
group = project.maven_group

repositories {
    mavenCentral()
    maven { url 'https://dl.cloudsmith.io/public/geckolib3/geckolib/maven/' }
	maven { url "https://cfa2.cursemaven.com" }
    maven { url "https://plugins.gradle.org/m2/" }
}

dependencies {
    // Minecraft/Fabric deps
    minecraft "com.mojang:minecraft:${project.minecraft_version}"
    mappings loom.officialMojangMappings()
	//mappings( loom.layered() {
	//	officialMojangMappings()
	//	parchment("org.parchmentmc.data:parchment-1.19.2:2022.08.14@zip")
	//})
    modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"
    modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"

    implementation(include('com.eliotlash.mclib:mclib:20'))
    implementation project(':core')

    implementation group: 'com.google.code.findbugs', name: 'jsr305', version: '3.0.2'
}

jar {
    from "LICENSE"
    manifest {
        attributes([
                "Specification-Title"     : "GeckoLib",
                "Specification-Vendor"    : "Gecko",
                "Specification-Version"   : "1", // We are version 1 of ourselves
                "Implementation-Title"    : project.name,
                "Implementation-Version"  : project.mod_version,
                "Implementation-Vendor"   : "Gecko",
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}

loom {
	accessWidenerPath = file("src/main/resources/geckolib.aw")
    runs {
        named("client") {
            client()
            configName = "Fabric Client"
            ideConfigGenerated(true)
            runDir("runs/"+name)
            programArg("--username=Dev")
        }
        named("server") {
            server()
            configName = "Fabric Server"
            ideConfigGenerated(true)
            runDir("runs/"+name)
        }
    }

}

tasks.withType(JavaCompile).configureEach {
    it.options.encoding = 'UTF-8'
    it.options.release = 17
    source(project(":core").sourceSets.main.allSource)
}

java {
	withSourcesJar()
    withJavadocJar()
    toolchain.languageVersion.set(JavaLanguageVersion.of(17))
}

sourcesJar {
    from project(":core").sourceSets.main.allSource
}

processResources {
    inputs.property "version", project.version

    filesMatching("fabric.mod.json") {
        expand "version": project.version
    }
    doLast {
        def jsonMinifyStart = System.currentTimeMillis()
        def jsonMinified = 0
        def jsonBytesSaved = 0
        fileTree(dir: outputs.files.asPath, include: '**/*.json').each {
            File file = it
            jsonMinified++
            def oldLength = file.length()
            file.text = JsonOutput.toJson(new JsonSlurper().parse(file))
            jsonBytesSaved += oldLength - file.length()
        }
        println('Minified ' + jsonMinified + ' json files. Saved ' + jsonBytesSaved + ' bytes. Took ' + (System.currentTimeMillis() - jsonMinifyStart) + 'ms.')
    }
}


publishing {
    publications {
        mavenJava(MavenPublication) {
            artifactId base.archivesName.get()
            from components.java
        }
    }
    repositories {
        //Don't personally like envVariable + findProperty but this is not my thing lol
        if (System.getenv("cloudUsername") == null && findProperty("cloudUsername") == null) {
            mavenLocal()
        }
        else maven {
            name = "cloudsmith"
            url = "https://maven.cloudsmith.io/geckolib3/geckolib/"
            credentials {
                def envUsername = System.getenv("cloudUsername")
                def envPassword = System.getenv("cloudPassword")
                username = envUsername == null ? findProperty("cloudUsername") : envUsername
                password = envPassword == null ? findProperty("cloudPassword") : envPassword
            }
        }
    }
}

if (file('key.properties').exists()) {
    curseforge {

    def curseProp = new Properties()
    File secretPropsFile = file("key.properties")
    curseProp.load(secretPropsFile.newInputStream())

    project {
        apiKey = curseProp.getProperty('curseKey')
        id = "388172"
        releaseType = "release"
        changelogType = 'text'
        changelog = file('changelog.txt')
		addGameVersion(minecraft_version)
        addGameVersion("Fabric")
        addGameVersion("Java 17")

        relations {
            requiredDependency 'fabric-api'      
        }
        mainArtifact(remapJar)

        afterEvaluate {
            uploadTask.dependsOn("remapJar")
        }
    }
    options {
    	//debug = true
        forgeGradleIntegration = false
    }
   }
}

if (file('key.properties').exists()) {
	modrinth {
		def modrinthProp = new Properties()
		File secretPropsFile = file("key.properties")
		modrinthProp.load(secretPropsFile.newInputStream())
		
		token = modrinthProp.getProperty('modrinthKey')
		projectId = '8BmcQJ2H' 
		versionNumber = project.mod_version 
		versionName = "Fabric ${minecraft_version}"
		uploadFile = remapJar 
		changelog = rootProject.file("changelog.txt").text
		gameVersions = [minecraft_version]
		versionType = "release"
		loaders = ['fabric']
		dependencies { 
        	required.project "fabric-api"
   		}
	}
}