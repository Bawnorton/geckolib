plugins {
    id 'java'
    id 'maven-publish'
    id 'net.minecraftforge.gradle' version '[6.0,6.2)'
    id 'com.matthewprenger.cursegradle' version '1.4.0'
    id 'org.spongepowered.mixin' version '0.7.+'
    id 'org.parchmentmc.librarian.forgegradle' version '1.+'
    id 'com.modrinth.minotaur' version '2.1.2'
}

import groovy.json.JsonOutput
import groovy.json.JsonSlurper

archivesBaseName = "geckolib-forge"
version = project.mod_version
group = project.maven_group

minecraft {
    mappings channel: 'parchment', version: '1.19.3-2023.03.12-1.20'
    accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')
    runs {
        client {
            workingDirectory project.file('runs/' + name)
            singleInstance true
            taskName 'geckolib-forge4.0-Client'

            property 'forge.logging.console.level', 'debug'
            property 'mixin.env.remapRefMap', 'true'

            property 'mixin.env.refMapRemappingFile', "${project.projectDir}/build/createSrgToMcp/output.srg"
            args "-mixin.config=geckolib.mixins.json"

            mods {
                geckolib {
                    source sourceSets.main
                    source project(":core").sourceSets.main
                }
            }
        }

        clientAlt {
            parent minecraft.runs.client
            workingDirectory project.file('runs/' + name)
            taskName 'geckolib-forge4.0-Client-2'
            args '--username', 'Alt'
        }

        server {
            workingDirectory project.file('runs/' + name)
            singleInstance true
            taskName 'geckolib-forge4.0-Server'

            property 'forge.logging.console.level', 'debug'
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${project.projectDir}/build/createSrgToMcp/output.srg"
            args "-mixin.config=geckolib.mixins.json"

            mods {
                geckolib {
                    source project(":core").sourceSets.main
                    source sourceSets.main
                }
            }
        }
    }
}

mixin { // Add mixins refmap
    add sourceSets.main, "geckolib.refmap.json"
    config "geckolib.mixins.json"
}

java {
    withSourcesJar()
    withJavadocJar()

    toolchain.languageVersion.set(JavaLanguageVersion.of(17))
}

repositories {
    maven { url "https://dl.cloudsmith.io/public/geckolib3/geckolib/maven/" }
}

jarJar.enable()

dependencies {
    minecraft 'net.minecraftforge:forge:1.20-46.0.1'
    implementation project(":core")
    minecraftLibrary 'com.eliotlash.mclib:mclib:20'
    jarJar 'com.eliotlash.mclib:mclib:[20,21)'
    if (System.getProperty("idea.sync.active") != "true") {
        annotationProcessor 'org.spongepowered:mixin:0.8.5:processor'
    }
}

tasks.withType(JavaCompile).configureEach {
    it.options.encoding = 'UTF-8'
    it.options.release = 17
    source(project(":core").sourceSets.main.allSource)
}

sourcesJar {
    from project(":core").sourceSets.main.allSource
}

processResources {
    from project(":core").sourceSets.main.resources
}

jar {
    manifest {
        attributes([
                "Specification-Title"     : "GeckoLib",
                "Specification-Vendor"    : "Gecko",
                "Specification-Version"   : "4",
                "Implementation-Title"    : project.name,
                "Implementation-Version"  : "${version}",
                "Implementation-Vendor"   : "Gecko",
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
        ])
    }
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
            artifactId base.archivesName.get()
            jarJar.component(it)
        }
    }
}
publishing {
    repositories {
        //Don't personally like envVariable + findProperty but this is not my thing lol
        if (System.getenv("cloudUsername") == null) {
            mavenLocal()
        }
        else maven {
            name = "cloudsmith"
            url = "https://maven.cloudsmith.io/geckolib3/geckolib/"
            credentials {
                def envUsername = System.getenv("cloudUsername")
                def envPassword = System.getenv("cloudPassword")
                username = envUsername == null ? findProperty("cloudUsername") : envUsername
                password = envPassword == null ? findProperty("cloudPassword") : envPassword
            }
        }
    }
}

processResources {
	doLast {
        def jsonMinifyStart = System.currentTimeMillis()
        def jsonMinified = 0
        def jsonBytesSaved = 0
        fileTree(dir: outputs.files.asPath, include: '**/*.json').each { 
            File file = it
            jsonMinified++
            def oldLength = file.length()
            file.text = JsonOutput.toJson(new JsonSlurper().parse(file))
            jsonBytesSaved += oldLength - file.length()
        }
        println('Minified ' + jsonMinified + ' json files. Saved ' + jsonBytesSaved + ' bytes. Took ' + (System.currentTimeMillis() - jsonMinifyStart) + 'ms.')
    }
}

if (file('key.properties').exists()) {
    curseforge {
        def curseProp = new Properties()
        File secretPropsFile = file("key.properties")
        curseProp.load(secretPropsFile.newInputStream())

        project {
            apiKey = curseProp.getProperty('curseKey')
            id = "388172"
            releaseType = "release"
            changelogType = 'text'
            changelog = file('changelog.txt')
        	addGameVersion("1.20")
            addGameVersion("Forge")
            addGameVersion("Java 17")
        }
    }
}

if (file('key.properties').exists()) {
	modrinth {
		def modrinthProp = new Properties()
		File secretPropsFile = file("key.properties")
		modrinthProp.load(secretPropsFile.newInputStream())
		
		token = modrinthProp.getProperty('modrinthKey')
		projectId = '8BmcQJ2H' 
		versionNumber = project.mod_version 
		versionName = 'Forge 1.20'
		uploadFile = jar 
		changelog = rootProject.file("changelog.txt").text
		gameVersions = ['1.20']
		loaders = ['forge']
	}
}
