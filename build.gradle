import groovy.json.JsonOutput
import groovy.json.JsonSlurper

plugins {
    // Required for NeoGradle
    id "org.jetbrains.gradle.plugin.idea-ext" version "1.1.7"
    id 'com.modrinth.minotaur' version '2.8.3' apply(false)
    id 'net.darkhax.curseforgegradle' version '1.1.15' apply(false)
}

subprojects {
    apply plugin: 'java'
    apply plugin: 'maven-publish'

    java.toolchain.languageVersion = JavaLanguageVersion.of(17)
    java.withSourcesJar()
    java.withJavadocJar()

    jar {
        from(rootProject.file("LICENSE")) {
            rename { "${it}_${mod_display_name}" }
        }
        manifest {
            attributes([
                    'Specification-Title'     : mod_display_name,
                    'Specification-Vendor'    : mod_authors,
                    'Specification-Version'   : project.jar.archiveVersion,
                    'Implementation-Title'    : project.name,
                    'Implementation-Version'  : project.jar.archiveVersion,
                    'Implementation-Vendor'   : mod_authors,
                    'Built-On-Minecraft'      : minecraft_version
            ])
        }
    }

    sourcesJar {
        from(rootProject.file("LICENSE")) {
            rename { "${it}_${mod_display_name}" }
        }
    }

    repositories {
        mavenCentral()
        maven {
            name = 'Sponge / Mixin'
            url = 'https://repo.spongepowered.org/repository/maven-public/'
        }
        maven {
            name = 'BlameJared Maven (JEI / CraftTweaker / Bookshelf)'
            url = 'https://maven.blamejared.com'
        }
    }

    tasks.withType(JavaCompile).configureEach {

        it.options.encoding = 'UTF-8'
        it.options.getRelease().set(17)
    }

    processResources {
        def expandProps = [
                "version": version,
                "group": project.group, //Else we target the task's group.
                "minecraft_version": minecraft_version,
                "forge_version": forge_version,
                "forge_loader_range": forge_loader_range,
                "forge_version_range": forge_version_range,
                "minecraft_version_range": minecraft_version_range,
                "fabric_api_version": fabric_api_version,
                "fabric_loader_version": fabric_loader_version,
                "mod_display_name": mod_display_name,
                "mod_authors": mod_authors,
                "mod_id": mod_id,
                "mod_license": mod_license,
                "mod_description": mod_description,
                "neoforge_version_range": neoforge_version,
                "neoforge_loader_range": neoforge_loader_range
        ]

        filesMatching(['pack.mcmeta', 'fabric.mod.json', 'META-INF/mods.toml', '*.mixins.json']) {
            expand expandProps
        }
        inputs.properties(expandProps)

        doLast {
            def jsonMinifyStart = System.currentTimeMillis()
            def jsonMinified = 0
            def jsonBytesSaved = 0
            fileTree(dir: outputs.files.asPath, include: '**/*.json').each {
                File file = it
                jsonMinified++
                def oldLength = file.length()
                file.text = JsonOutput.toJson(new JsonSlurper().parse(file))
                jsonBytesSaved += oldLength - file.length()
                println(file.name)
            }
            println('Minified ' + jsonMinified + ' json files. Saved ' + jsonBytesSaved + ' bytes. Took ' + (System.currentTimeMillis() - jsonMinifyStart) + 'ms.')
        }
    }

    // Disables Gradle's custom module metadata from being published to maven. The
    // metadata includes mapped dependencies which are not reasonably consumable by
    // other mod developers.
    tasks.withType(GenerateModuleMetadata).configureEach {

        enabled = false
    }

    publishing {
        publications {
            mavenJava(MavenPublication) {
                from components.java
                artifactId base.archivesName.get()
            }
        }

        repositories {
            if (System.getenv("cloudUsername") == null && System.getenv("cloudPassword") == null) {
                mavenLocal()
            }
            else maven {
                name = "cloudsmith"
                url = "https://maven.cloudsmith.io/geckolib3/geckolib/"
                credentials {
                    username = System.getenv("cloudUsername")
                    password = System.getenv("cloudPassword")
                }
            }
        }
    }
}