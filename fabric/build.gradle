plugins {
    id 'fabric-loom' version '1.3-SNAPSHOT'
    id 'java'
    id 'maven-publish'
    id 'com.modrinth.minotaur' version '2.8.3'
    id 'net.darkhax.curseforgegradle' version '1.1.15'
}

import groovy.json.JsonOutput
import groovy.json.JsonSlurper

sourceCompatibility = targetCompatibility = JavaVersion.VERSION_17

base {
    archivesName = "geckolib-fabric-${minecraft_version}"
}

repositories {
    mavenCentral() {
        content {
            includeGroup "com.google.code.findbugs"
        }
    }
    maven {
        url 'https://dl.cloudsmith.io/public/geckolib3/geckolib/maven/'
        content {
            includeGroup "com.eliotlash.mclib"
        }
    }
    maven {
        name = "ParchmentMC"
        url = 'https://maven.parchmentmc.org'
    }
}

dependencies {
    minecraft "com.mojang:minecraft:${minecraft_version}"
    mappings loom.layered() {
        officialMojangMappings()
        parchment("org.parchmentmc.data:parchment-${mappings_mc_version}:${parchment_version}@zip")
    }
    modImplementation "net.fabricmc:fabric-loader:${fabric_loader_version}"
    modImplementation "net.fabricmc.fabric-api:fabric-api:${fabric_api_version}"

    compileOnly project(':common')
    implementation("com.eliotlash.mclib:mclib:${mclib_version}")
    include("com.eliotlash.mclib:mclib:${mclib_version}")
    implementation "com.google.code.findbugs:jsr305:3.0.1" //Provides the Nullable annotations
}

tasks.withType(org.gradle.jvm.tasks.Jar).configureEach {
    from rootProject.file("LICENSE")
}

jar {
    manifest {
        attributes([
                "Specification-Title"     : "${mod_display_name}",
                "Specification-Vendor"    : mod_authors,
                "Specification-Version"   : "4",
                "Implementation-Title"    : mod_display_name + " " + project.name,
                "Implementation-Version"  : version,
                "Implementation-Vendor"   : mod_authors,
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}

loom {
	accessWidenerPath = project(":common").file("src/main/resources/geckolib.accesswidener")
    runs {
        named("client") {
            client()
            configName = "Fabric Client"
            ideConfigGenerated(true)
            runDir("runs/"+name)
            programArg("--username=Dev")
        }
        named("server") {
            server()
            configName = "Fabric Server"
            ideConfigGenerated(true)
            runDir("runs/"+name)
        }
    }

}

tasks.withType(JavaCompile).configureEach {
    it.options.setEncoding('UTF-8')
    it.options.release.set(17)
    source(project(":common").sourceSets.main.allSource)
}

java {
	withSourcesJar()
    withJavadocJar()
    toolchain.languageVersion.set(JavaLanguageVersion.of(17))
}

sourcesJar {
    from project(":common").sourceSets.main.allSource
}

processResources {

   from project(":common").sourceSets.main.resources
}


publishing {
    publications {
        mavenJava(MavenPublication) {
            artifactId base.archivesName.get()
            from components.java
        }
    }
    repositories {
        if (System.getenv("cloudUsername") == null && System.getenv("cloudPassword") == null) {
            mavenLocal()
        }
        else maven {
            name = "cloudsmith"
            url = "https://maven.cloudsmith.io/geckolib3/geckolib/"
            credentials {
                def envUsername = System.getenv("cloudUsername")
                def envPassword = System.getenv("cloudPassword")
                username = envUsername == null ? findProperty("cloudUsername") : envUsername
                password = envPassword == null ? findProperty("cloudPassword") : envPassword
            }
        }
    }
}

modrinth {
    token = System.getenv("modrinthKey") ?: "Invalid/No API Token Found"
    projectId = '8BmcQJ2H'
    versionNumber = project.version
    versionName = "Fabric ${minecraft_version}"
    uploadFile = tasks.remapJar
    changelog = rootProject.file("changelog.txt").text
    gameVersions = [minecraft_version]
    versionType = "release"
    loaders = ['fabric']
    dependencies {
        required.project "fabric-api"
    }

    //https://github.com/modrinth/minotaur#available-properties
}

task publishToCurseForge(type:  net.darkhax.curseforgegradle.TaskPublishCurseForge) {
    group = "publishing"
    apiToken = System.getenv("curseforge.apitoken") ?: "Invalid/No API Token Found"

    def mainFile = upload(388172, tasks.remapJar)
    mainFile.releaseType = "release"
    mainFile.addModLoader("Forge")
    mainFile.addGameVersion(minecraft_version)
    mainFile.addJavaVersion("Java 17")
    mainFile.changelog = rootProject.file("changelog.txt").text

    //https://github.com/Darkhax/CurseForgeGradle#available-properties
}

publish.finalizedBy('modrinth', 'publishToCurseForge')