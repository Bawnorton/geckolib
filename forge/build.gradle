plugins {
    id 'java'
    id 'eclipse' //both are required for the ideCopyResourcesTask
    id 'idea'
    id 'maven-publish'
    id 'net.minecraftforge.gradle' version '[6.0,6.2)'
    id 'org.spongepowered.mixin' version '0.7.+'
    id 'org.parchmentmc.librarian.forgegradle' version '1.+'
    id 'com.modrinth.minotaur'
    id 'net.darkhax.curseforgegradle'
}

base {
    archivesName = "geckolib-forge-${minecraft_version}"
}

minecraft {
    mappings channel: 'parchment', version: "${mappings_mc_version}-${parchment_version}-${minecraft_version}"
    accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')
    // This property allows configuring Gradle's ProcessResources task(s) to run on IDE output locations before launching the game.
    // It is REQUIRED to be set to true for this template to function.
    // See https://docs.gradle.org/current/dsl/org.gradle.language.jvm.tasks.ProcessResources.html
    copyIdeResources = true
    runs {
        sourceSets.each {
            def dir = layout.buildDirectory.dir("sourcesSets/$it.name")
            it.output.resourcesDir = dir
            it.java.destinationDirectory = dir
        }

        client {
            workingDirectory project.file('runs/' + name)
            ideaModule("${rootProject.name}.${project.name}.main")
            singleInstance true
            taskName "${mod_id}-forge4.0-Client"

            property 'forge.logging.console.level', 'debug'
            property 'mixin.env.remapRefMap', 'true'

            property 'mixin.env.refMapRemappingFile', "${project.projectDir}/build/createSrgToMcp/output.srg"
            args "-mixin.config=${mod_id}.mixins.json"

            mods {
                "${mod_id}" {
                    source sourceSets.main
                    source project(":common").sourceSets.main
                }
            }
        }

        clientAlt {
            parent minecraft.runs.client
            workingDirectory project.file('runs/' + name)
            taskName "${mod_id}-forge4.0-Client-2"
            args '--username', 'Alt'
        }

        server {
            workingDirectory project.file('runs/' + name)
            ideaModule("${rootProject.name}.${project.name}.main")
            singleInstance true
            taskName "${mod_id}-forge4.0-Server"

            property 'forge.logging.console.level', 'debug'
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${project.projectDir}/build/createSrgToMcp/output.srg"
            args "-mixin.config=${mod_id}.mixins.json"

            mods {
                "${mod_id}" {
                    source project(":common").sourceSets.main
                    source sourceSets.main
                }
            }
        }
    }
}

dependencies {
    minecraft "net.minecraftforge:forge:${minecraft_version}-${forge_version}"
    compileOnly project(":common")
    if (System.getProperty("idea.sync.active") != "true") {
        annotationProcessor 'org.spongepowered:mixin:0.8.5:processor'
    }
    compileOnly(annotationProcessor("io.github.llamalad7:mixinextras-common:0.3.5"))
    implementation(jarJar("io.github.llamalad7:mixinextras-forge:0.3.5")) {
        jarJar.ranged(it, "[0.3.5,)") //TODO figure out jarJar again
    }
}


tasks.withType(JavaCompile).configureEach {
    source(project(":common").sourceSets.main.allSource)
}

sourcesJar {
    from project(":common").sourceSets.main.allSource
}

mixin {
    add sourceSets.main, "${mod_id}.refmap.json"
    config "${mod_id}.mixins.json"
}

processResources {
    from project(":common").sourceSets.main.resources
}

modrinth {
		token = System.getenv("modrinthKey") ?: "Invalid/No API Token Found"
		projectId = '8BmcQJ2H' 
		versionNumber = project.version
		versionName = "Forge ${minecraft_version}"
		uploadFile = tasks.jar.exclude("assets/")
		changelog = rootProject.file("changelog.txt").text
		gameVersions = [minecraft_version]
		loaders = ['forge']
        debugMode = true
        //https://github.com/modrinth/minotaur#available-properties
}

task publishToCurseForge(type:  net.darkhax.curseforgegradle.TaskPublishCurseForge) {
    group = "publishing"
    apiToken = System.getenv("curseforge.apitoken") ?: "Invalid/No API Token Found"

    def mainFile = upload(388172, tasks.jar.exclude("assets/"))
    mainFile.releaseType = "release"
    mainFile.addModLoader("Forge")
    mainFile.addGameVersion(minecraft_version)
    mainFile.addJavaVersion("Java 17")
    mainFile.changelog = rootProject.file("changelog.txt").text
    debugMode = true
    //https://github.com/Darkhax/CurseForgeGradle#available-properties
}

publish.finalizedBy('modrinth', 'publishToCurseForge')

